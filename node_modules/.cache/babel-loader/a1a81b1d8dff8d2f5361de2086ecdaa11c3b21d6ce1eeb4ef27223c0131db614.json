{"ast":null,"code":"// Define API base URL to automatically detect server port\n// In production, this should be your server's domain\nconst getApiBaseUrl = () => {\n  // Parse port from window.location if in browser\n  const port = window.location.port;\n\n  // If frontend runs on port 3001 (development), backend is likely on 8080\n  if (port === '3001') {\n    return 'http://localhost:8080/api';\n  }\n\n  // Otherwise use the same host and port as the frontend (for production)\n  return `${window.location.protocol}//${window.location.hostname}:${port}/api`;\n};\nconst API_BASE_URL = getApiBaseUrl();\nconsole.log('Using API base URL:', API_BASE_URL);\n\n// Fetch with timeout and retry helper\nconst fetchWithRetry = async (url, options = {}, timeout = 5000, retries = 2) => {\n  let lastError;\n  for (let attempt = 0; attempt <= retries; attempt++) {\n    if (attempt > 0) {\n      console.log(`Retry attempt ${attempt}/${retries} for ${url}`);\n      // Add exponential backoff delay for retries\n      await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, attempt - 1)));\n    }\n    try {\n      const controller = new AbortController();\n      const {\n        signal\n      } = controller;\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n      const response = await fetch(url, {\n        ...options,\n        signal\n      });\n      clearTimeout(timeoutId);\n\n      // On success, return the response\n      return response;\n    } catch (error) {\n      lastError = error;\n      console.error(`Attempt ${attempt + 1}/${retries + 1} failed for ${url}:`, error.message);\n    }\n  }\n\n  // If we exhausted all retries, throw the last error\n  throw lastError;\n};\n\n// Helper function to safely parse JSON\nconst safeJsonParse = async response => {\n  try {\n    return await response.json();\n  } catch (error) {\n    console.error('Error parsing JSON response:', error);\n    throw new Error('Invalid JSON response from server');\n  }\n};\n\n/**\r\n * Service to fetch game data from Steam API (proxied through backend)\r\n */\nconst SteamApiService = {\n  /**\r\n   * Fetch a featured game\r\n   * @returns {Promise} Promise object with featured game data\r\n   */\n  getFeaturedGame: async () => {\n    try {\n      console.log('Fetching featured game');\n      const response = await fetchWithRetry(`${API_BASE_URL}/featured-game`);\n      if (!response.ok) {\n        const errorData = await safeJsonParse(response).catch(() => ({}));\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\n        console.error('Server error response:', errorData);\n        throw new Error(errorMsg);\n      }\n      return await safeJsonParse(response);\n    } catch (error) {\n      console.error('Error fetching featured game:', error.message);\n      throw error;\n    }\n  },\n  /**\r\n   * Fetch trending games\r\n   * @returns {Promise} Promise object with trending games data\r\n   */\n  getTrendingGames: async () => {\n    try {\n      console.log('Fetching trending games');\n      const response = await fetchWithRetry(`${API_BASE_URL}/trending-games`);\n      if (!response.ok) {\n        const errorData = await safeJsonParse(response).catch(() => ({}));\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\n        console.error('Server error response:', errorData);\n        throw new Error(errorMsg);\n      }\n      return await safeJsonParse(response);\n    } catch (error) {\n      console.error('Error fetching trending games:', error.message);\n      throw error;\n    }\n  },\n  /**\r\n   * Fetch top rated games\r\n   * @returns {Promise} Promise object with top rated games data\r\n   */\n  getTopRatedGames: async () => {\n    try {\n      console.log('Fetching top rated games');\n      const response = await fetchWithRetry(`${API_BASE_URL}/top-rated-games`);\n      if (!response.ok) {\n        const errorData = await safeJsonParse(response).catch(() => ({}));\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\n        console.error('Server error response:', errorData);\n        throw new Error(errorMsg);\n      }\n      return await safeJsonParse(response);\n    } catch (error) {\n      console.error('Error fetching top rated games:', error.message);\n      throw error;\n    }\n  },\n  /**\r\n   * Fetch new releases\r\n   * @returns {Promise} Promise object with new releases data\r\n   */\n  getNewReleases: async () => {\n    try {\n      console.log('Fetching new releases');\n      const response = await fetchWithRetry(`${API_BASE_URL}/new-releases`);\n      if (!response.ok) {\n        const errorData = await safeJsonParse(response).catch(() => ({}));\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\n        console.error('Server error response:', errorData);\n        throw new Error(errorMsg);\n      }\n      return await safeJsonParse(response);\n    } catch (error) {\n      console.error('Error fetching new releases:', error.message);\n      throw error;\n    }\n  },\n  /**\r\n   * Fetch game details by app ID\r\n   * @param {string} gameId - The Steam app ID\r\n   * @returns {Promise} Promise object with game details\r\n   */\n  getGameDetails: async gameId => {\n    try {\n      console.log(`Fetching game details for ID: ${gameId}`);\n      const response = await fetchWithRetry(`${API_BASE_URL}/game/${gameId}`);\n      if (!response.ok) {\n        const errorData = await safeJsonParse(response).catch(() => ({}));\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\n        console.error('Server error response:', errorData);\n        throw new Error(errorMsg);\n      }\n      return await safeJsonParse(response);\n    } catch (error) {\n      console.error(`Error fetching game details for ${gameId}:`, error.message);\n      throw error;\n    }\n  },\n  /**\r\n   * Fetch player count history for a game\r\n   * @param {string} gameId - The Steam app ID\r\n   * @param {string} period - Time period ('24h', '7d', '30d', 'all')\r\n   * @returns {Promise} Promise object with player count history data\r\n   */\n  getPlayerCountHistory: async (gameId, period = '7d') => {\n    try {\n      console.log(`Fetching player count history for game ${gameId}, period: ${period}`);\n      const response = await fetchWithRetry(`${API_BASE_URL}/player-count/${gameId}?period=${period}`);\n      if (!response.ok) {\n        const errorData = await safeJsonParse(response).catch(() => ({}));\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\n        console.error('Server error response:', errorData);\n        throw new Error(errorMsg);\n      }\n      return await safeJsonParse(response);\n    } catch (error) {\n      console.error(`Error fetching player count history for ${gameId}:`, error.message);\n      throw error;\n    }\n  },\n  /**\r\n   * Fetch price history for a game\r\n   * @param {string} gameId - The Steam app ID\r\n   * @returns {Promise} Promise object with price history data\r\n   */\n  getPriceHistory: async gameId => {\n    try {\n      console.log(`Fetching price history for game ${gameId}`);\n      const response = await fetchWithRetry(`${API_BASE_URL}/price-history/${gameId}`);\n      if (!response.ok) {\n        const errorData = await safeJsonParse(response).catch(() => ({}));\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\n        console.error('Server error response:', errorData);\n        throw new Error(errorMsg);\n      }\n      return await safeJsonParse(response);\n    } catch (error) {\n      console.error(`Error fetching price history for ${gameId}:`, error.message);\n      throw error;\n    }\n  },\n  /**\r\n   * Search for games\r\n   * @param {string} query - Search query\r\n   * @returns {Promise} Promise object with search results\r\n   */\n  searchGames: async query => {\n    try {\n      console.log(`Searching for games with query: \"${query}\"`);\n      const response = await fetchWithRetry(`${API_BASE_URL}/search?q=${encodeURIComponent(query)}`);\n      if (!response.ok) {\n        const errorData = await safeJsonParse(response).catch(() => ({}));\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\n        console.error('Server error response:', errorData);\n        throw new Error(errorMsg);\n      }\n      return await safeJsonParse(response);\n    } catch (error) {\n      console.error(`Error searching for games with query \"${query}\":`, error.message);\n      throw error;\n    }\n  }\n};\nexport default SteamApiService;","map":{"version":3,"names":["getApiBaseUrl","port","window","location","protocol","hostname","API_BASE_URL","console","log","fetchWithRetry","url","options","timeout","retries","lastError","attempt","Promise","resolve","setTimeout","Math","pow","controller","AbortController","signal","timeoutId","abort","response","fetch","clearTimeout","error","message","safeJsonParse","json","Error","SteamApiService","getFeaturedGame","ok","errorData","catch","errorMsg","getTrendingGames","getTopRatedGames","getNewReleases","getGameDetails","gameId","getPlayerCountHistory","period","getPriceHistory","searchGames","query","encodeURIComponent"],"sources":["C:/Users/kshit/Desktop/WP and dbms project/GameVault/src/services/steamApi.js"],"sourcesContent":["// Define API base URL to automatically detect server port\r\n// In production, this should be your server's domain\r\nconst getApiBaseUrl = () => {\r\n  // Parse port from window.location if in browser\r\n  const port = window.location.port;\r\n  \r\n  // If frontend runs on port 3001 (development), backend is likely on 8080\r\n  if (port === '3001') {\r\n    return 'http://localhost:8080/api';\r\n  }\r\n  \r\n  // Otherwise use the same host and port as the frontend (for production)\r\n  return `${window.location.protocol}//${window.location.hostname}:${port}/api`;\r\n};\r\n\r\nconst API_BASE_URL = getApiBaseUrl();\r\nconsole.log('Using API base URL:', API_BASE_URL);\r\n\r\n// Fetch with timeout and retry helper\r\nconst fetchWithRetry = async (url, options = {}, timeout = 5000, retries = 2) => {\r\n  let lastError;\r\n  \r\n  for (let attempt = 0; attempt <= retries; attempt++) {\r\n    if (attempt > 0) {\r\n      console.log(`Retry attempt ${attempt}/${retries} for ${url}`);\r\n      // Add exponential backoff delay for retries\r\n      await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, attempt - 1)));\r\n    }\r\n    \r\n    try {\r\n      const controller = new AbortController();\r\n      const { signal } = controller;\r\n      \r\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\r\n      \r\n      const response = await fetch(url, { ...options, signal });\r\n      clearTimeout(timeoutId);\r\n      \r\n      // On success, return the response\r\n      return response;\r\n    } catch (error) {\r\n      lastError = error;\r\n      console.error(`Attempt ${attempt + 1}/${retries + 1} failed for ${url}:`, error.message);\r\n    }\r\n  }\r\n  \r\n  // If we exhausted all retries, throw the last error\r\n  throw lastError;\r\n};\r\n\r\n// Helper function to safely parse JSON\r\nconst safeJsonParse = async (response) => {\r\n  try {\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error parsing JSON response:', error);\r\n    throw new Error('Invalid JSON response from server');\r\n  }\r\n};\r\n\r\n/**\r\n * Service to fetch game data from Steam API (proxied through backend)\r\n */\r\nconst SteamApiService = {\r\n  /**\r\n   * Fetch a featured game\r\n   * @returns {Promise} Promise object with featured game data\r\n   */\r\n  getFeaturedGame: async () => {\r\n    try {\r\n      console.log('Fetching featured game');\r\n      const response = await fetchWithRetry(`${API_BASE_URL}/featured-game`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await safeJsonParse(response).catch(() => ({}));\r\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\r\n        console.error('Server error response:', errorData);\r\n        throw new Error(errorMsg);\r\n      }\r\n      \r\n      return await safeJsonParse(response);\r\n    } catch (error) {\r\n      console.error('Error fetching featured game:', error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch trending games\r\n   * @returns {Promise} Promise object with trending games data\r\n   */\r\n  getTrendingGames: async () => {\r\n    try {\r\n      console.log('Fetching trending games');\r\n      const response = await fetchWithRetry(`${API_BASE_URL}/trending-games`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await safeJsonParse(response).catch(() => ({}));\r\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\r\n        console.error('Server error response:', errorData);\r\n        throw new Error(errorMsg);\r\n      }\r\n      \r\n      return await safeJsonParse(response);\r\n    } catch (error) {\r\n      console.error('Error fetching trending games:', error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch top rated games\r\n   * @returns {Promise} Promise object with top rated games data\r\n   */\r\n  getTopRatedGames: async () => {\r\n    try {\r\n      console.log('Fetching top rated games');\r\n      const response = await fetchWithRetry(`${API_BASE_URL}/top-rated-games`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await safeJsonParse(response).catch(() => ({}));\r\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\r\n        console.error('Server error response:', errorData);\r\n        throw new Error(errorMsg);\r\n      }\r\n      \r\n      return await safeJsonParse(response);\r\n    } catch (error) {\r\n      console.error('Error fetching top rated games:', error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch new releases\r\n   * @returns {Promise} Promise object with new releases data\r\n   */\r\n  getNewReleases: async () => {\r\n    try {\r\n      console.log('Fetching new releases');\r\n      const response = await fetchWithRetry(`${API_BASE_URL}/new-releases`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await safeJsonParse(response).catch(() => ({}));\r\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\r\n        console.error('Server error response:', errorData);\r\n        throw new Error(errorMsg);\r\n      }\r\n      \r\n      return await safeJsonParse(response);\r\n    } catch (error) {\r\n      console.error('Error fetching new releases:', error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch game details by app ID\r\n   * @param {string} gameId - The Steam app ID\r\n   * @returns {Promise} Promise object with game details\r\n   */\r\n  getGameDetails: async (gameId) => {\r\n    try {\r\n      console.log(`Fetching game details for ID: ${gameId}`);\r\n      const response = await fetchWithRetry(`${API_BASE_URL}/game/${gameId}`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await safeJsonParse(response).catch(() => ({}));\r\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\r\n        console.error('Server error response:', errorData);\r\n        throw new Error(errorMsg);\r\n      }\r\n      \r\n      return await safeJsonParse(response);\r\n    } catch (error) {\r\n      console.error(`Error fetching game details for ${gameId}:`, error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch player count history for a game\r\n   * @param {string} gameId - The Steam app ID\r\n   * @param {string} period - Time period ('24h', '7d', '30d', 'all')\r\n   * @returns {Promise} Promise object with player count history data\r\n   */\r\n  getPlayerCountHistory: async (gameId, period = '7d') => {\r\n    try {\r\n      console.log(`Fetching player count history for game ${gameId}, period: ${period}`);\r\n      const response = await fetchWithRetry(`${API_BASE_URL}/player-count/${gameId}?period=${period}`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await safeJsonParse(response).catch(() => ({}));\r\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\r\n        console.error('Server error response:', errorData);\r\n        throw new Error(errorMsg);\r\n      }\r\n      \r\n      return await safeJsonParse(response);\r\n    } catch (error) {\r\n      console.error(`Error fetching player count history for ${gameId}:`, error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch price history for a game\r\n   * @param {string} gameId - The Steam app ID\r\n   * @returns {Promise} Promise object with price history data\r\n   */\r\n  getPriceHistory: async (gameId) => {\r\n    try {\r\n      console.log(`Fetching price history for game ${gameId}`);\r\n      const response = await fetchWithRetry(`${API_BASE_URL}/price-history/${gameId}`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await safeJsonParse(response).catch(() => ({}));\r\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\r\n        console.error('Server error response:', errorData);\r\n        throw new Error(errorMsg);\r\n      }\r\n      \r\n      return await safeJsonParse(response);\r\n    } catch (error) {\r\n      console.error(`Error fetching price history for ${gameId}:`, error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Search for games\r\n   * @param {string} query - Search query\r\n   * @returns {Promise} Promise object with search results\r\n   */\r\n  searchGames: async (query) => {\r\n    try {\r\n      console.log(`Searching for games with query: \"${query}\"`);\r\n      const response = await fetchWithRetry(`${API_BASE_URL}/search?q=${encodeURIComponent(query)}`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await safeJsonParse(response).catch(() => ({}));\r\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\r\n        console.error('Server error response:', errorData);\r\n        throw new Error(errorMsg);\r\n      }\r\n      \r\n      return await safeJsonParse(response);\r\n    } catch (error) {\r\n      console.error(`Error searching for games with query \"${query}\":`, error.message);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default SteamApiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}