{"ast":null,"code":"// Define API base URL to automatically detect server port\n// In production, this should be your server's domain\nconst getApiBaseUrl = () => {\n  // Parse port from window.location if in browser\n  const port = window.location.port;\n\n  // If frontend runs on port 3001 (development), backend is likely on 8080\n  if (port === '3001') {\n    return 'http://localhost:8080/api';\n  }\n\n  // Otherwise use the same host and port as the frontend (for production)\n  return `${window.location.protocol}//${window.location.hostname}:${port}/api`;\n};\nconst API_BASE_URL = getApiBaseUrl();\n\n// Fetch with timeout helper\nconst fetchWithTimeout = async (url, options = {}, timeout = 5000) => {\n  const controller = new AbortController();\n  const {\n    signal\n  } = controller;\n  const timeoutId = setTimeout(() => controller.abort(), timeout);\n  try {\n    const response = await fetch(url, {\n      ...options,\n      signal\n    });\n    clearTimeout(timeoutId);\n    return response;\n  } catch (error) {\n    clearTimeout(timeoutId);\n    throw error;\n  }\n};\n\n/**\r\n * Service to fetch game data from Steam API (proxied through backend)\r\n */\nconst SteamApiService = {\n  /**\r\n   * Fetch a featured game\r\n   * @returns {Promise} Promise object with featured game data\r\n   */\n  getFeaturedGame: async () => {\n    try {\n      const response = await fetchWithTimeout(`${API_BASE_URL}/featured-game`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching featured game:', error);\n      // Return mock data when API fails\n      return {\n        id: '1151640',\n        title: 'Elden Ring',\n        description: 'A new dark fantasy action-RPG from FromSoftware, creators of Dark Souls.',\n        cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1151640/header.jpg',\n        year: 2022,\n        platforms: ['PC', 'PlayStation', 'Xbox'],\n        rating: 4.8\n      };\n    }\n  },\n  /**\r\n   * Fetch trending games\r\n   * @returns {Promise} Promise object with trending games data\r\n   */\n  getTrendingGames: async () => {\n    try {\n      const response = await fetchWithTimeout(`${API_BASE_URL}/trending-games`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching trending games:', error);\n      // Return mock trending games data when API fails\n      return [{\n        id: '1151640',\n        title: 'Elden Ring',\n        cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1151640/header.jpg',\n        year: 2022,\n        platforms: ['PC', 'PlayStation', 'Xbox'],\n        rating: 4.8\n      }, {\n        id: '990080',\n        title: 'Hogwarts Legacy',\n        cover: 'https://cdn.akamai.steamstatic.com/steam/apps/990080/header.jpg',\n        year: 2023,\n        platforms: ['PC', 'PlayStation', 'Xbox'],\n        rating: 4.5\n      }, {\n        id: '1888160',\n        title: 'Final Fantasy XVI',\n        cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1888160/header.jpg',\n        year: 2023,\n        platforms: ['PC', 'PlayStation'],\n        rating: 4.7\n      }];\n    }\n  },\n  /**\r\n   * Fetch top rated games\r\n   * @returns {Promise} Promise object with top rated games data\r\n   */\n  getTopRatedGames: async () => {\n    try {\n      const response = await fetchWithTimeout(`${API_BASE_URL}/top-rated-games`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching top rated games:', error);\n      // Return mock top rated games when API fails\n      return [{\n        id: '292030',\n        title: 'The Witcher 3',\n        cover: 'https://cdn.akamai.steamstatic.com/steam/apps/292030/header.jpg',\n        year: 2015,\n        platforms: ['PC', 'PlayStation', 'Xbox', 'Switch'],\n        rating: 4.9\n      }, {\n        id: '1151640',\n        title: 'Elden Ring',\n        cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1151640/header.jpg',\n        year: 2022,\n        platforms: ['PC', 'PlayStation', 'Xbox'],\n        rating: 4.8\n      }, {\n        id: '1888160',\n        title: 'Final Fantasy XVI',\n        cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1888160/header.jpg',\n        year: 2023,\n        platforms: ['PC', 'PlayStation'],\n        rating: 4.7\n      }];\n    }\n  },\n  /**\r\n   * Fetch new releases\r\n   * @returns {Promise} Promise object with new releases data\r\n   */\n  getNewReleases: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/new-releases`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching new releases:', error);\n      return [];\n    }\n  },\n  /**\r\n   * Fetch game details by app ID\r\n   * @param {string} gameId - The Steam app ID\r\n   * @returns {Promise} Promise object with game details\r\n   */\n  getGameDetails: async gameId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/game/${gameId}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error fetching game details for ${gameId}:`, error);\n      return null;\n    }\n  },\n  /**\r\n   * Fetch player count history for a game\r\n   * @param {string} gameId - The Steam app ID\r\n   * @param {string} period - Time period ('24h', '7d', '30d', 'all')\r\n   * @returns {Promise} Promise object with player count history data\r\n   */\n  getPlayerCountHistory: async (gameId, period = '7d') => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/player-count/${gameId}?period=${period}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error fetching player count history for ${gameId}:`, error);\n      return [];\n    }\n  },\n  /**\r\n   * Fetch price history for a game\r\n   * @param {string} gameId - The Steam app ID\r\n   * @returns {Promise} Promise object with price history data\r\n   */\n  getPriceHistory: async gameId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/price-history/${gameId}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error fetching price history for ${gameId}:`, error);\n      return [];\n    }\n  },\n  /**\r\n   * Search for games\r\n   * @param {string} query - Search query\r\n   * @returns {Promise} Promise object with search results\r\n   */\n  searchGames: async query => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/search?q=${encodeURIComponent(query)}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error searching for games with query \"${query}\":`, error);\n      return [];\n    }\n  }\n};\nexport default SteamApiService;","map":{"version":3,"names":["getApiBaseUrl","port","window","location","protocol","hostname","API_BASE_URL","fetchWithTimeout","url","options","timeout","controller","AbortController","signal","timeoutId","setTimeout","abort","response","fetch","clearTimeout","error","SteamApiService","getFeaturedGame","ok","Error","json","console","id","title","description","cover","year","platforms","rating","getTrendingGames","getTopRatedGames","getNewReleases","getGameDetails","gameId","getPlayerCountHistory","period","getPriceHistory","searchGames","query","encodeURIComponent"],"sources":["C:/Users/kshit/Desktop/WP and dbms project/GameVault/src/services/steamApi.js"],"sourcesContent":["// Define API base URL to automatically detect server port\r\n// In production, this should be your server's domain\r\nconst getApiBaseUrl = () => {\r\n  // Parse port from window.location if in browser\r\n  const port = window.location.port;\r\n  \r\n  // If frontend runs on port 3001 (development), backend is likely on 8080\r\n  if (port === '3001') {\r\n    return 'http://localhost:8080/api';\r\n  }\r\n  \r\n  // Otherwise use the same host and port as the frontend (for production)\r\n  return `${window.location.protocol}//${window.location.hostname}:${port}/api`;\r\n};\r\n\r\nconst API_BASE_URL = getApiBaseUrl();\r\n\r\n// Fetch with timeout helper\r\nconst fetchWithTimeout = async (url, options = {}, timeout = 5000) => {\r\n  const controller = new AbortController();\r\n  const { signal } = controller;\r\n  \r\n  const timeoutId = setTimeout(() => controller.abort(), timeout);\r\n  \r\n  try {\r\n    const response = await fetch(url, { ...options, signal });\r\n    clearTimeout(timeoutId);\r\n    return response;\r\n  } catch (error) {\r\n    clearTimeout(timeoutId);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Service to fetch game data from Steam API (proxied through backend)\r\n */\r\nconst SteamApiService = {\r\n  /**\r\n   * Fetch a featured game\r\n   * @returns {Promise} Promise object with featured game data\r\n   */\r\n  getFeaturedGame: async () => {\r\n    try {\r\n      const response = await fetchWithTimeout(`${API_BASE_URL}/featured-game`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching featured game:', error);\r\n      // Return mock data when API fails\r\n      return {\r\n        id: '1151640',\r\n        title: 'Elden Ring',\r\n        description: 'A new dark fantasy action-RPG from FromSoftware, creators of Dark Souls.',\r\n        cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1151640/header.jpg',\r\n        year: 2022,\r\n        platforms: ['PC', 'PlayStation', 'Xbox'],\r\n        rating: 4.8\r\n      };\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch trending games\r\n   * @returns {Promise} Promise object with trending games data\r\n   */\r\n  getTrendingGames: async () => {\r\n    try {\r\n      const response = await fetchWithTimeout(`${API_BASE_URL}/trending-games`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching trending games:', error);\r\n      // Return mock trending games data when API fails\r\n      return [\r\n        {\r\n          id: '1151640',\r\n          title: 'Elden Ring',\r\n          cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1151640/header.jpg',\r\n          year: 2022,\r\n          platforms: ['PC', 'PlayStation', 'Xbox'],\r\n          rating: 4.8\r\n        },\r\n        {\r\n          id: '990080',\r\n          title: 'Hogwarts Legacy',\r\n          cover: 'https://cdn.akamai.steamstatic.com/steam/apps/990080/header.jpg',\r\n          year: 2023,\r\n          platforms: ['PC', 'PlayStation', 'Xbox'],\r\n          rating: 4.5\r\n        },\r\n        {\r\n          id: '1888160',\r\n          title: 'Final Fantasy XVI',\r\n          cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1888160/header.jpg',\r\n          year: 2023,\r\n          platforms: ['PC', 'PlayStation'],\r\n          rating: 4.7\r\n        }\r\n      ];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch top rated games\r\n   * @returns {Promise} Promise object with top rated games data\r\n   */\r\n  getTopRatedGames: async () => {\r\n    try {\r\n      const response = await fetchWithTimeout(`${API_BASE_URL}/top-rated-games`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching top rated games:', error);\r\n      // Return mock top rated games when API fails\r\n      return [\r\n        {\r\n          id: '292030',\r\n          title: 'The Witcher 3',\r\n          cover: 'https://cdn.akamai.steamstatic.com/steam/apps/292030/header.jpg',\r\n          year: 2015,\r\n          platforms: ['PC', 'PlayStation', 'Xbox', 'Switch'],\r\n          rating: 4.9\r\n        },\r\n        {\r\n          id: '1151640',\r\n          title: 'Elden Ring',\r\n          cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1151640/header.jpg',\r\n          year: 2022,\r\n          platforms: ['PC', 'PlayStation', 'Xbox'],\r\n          rating: 4.8\r\n        },\r\n        {\r\n          id: '1888160',\r\n          title: 'Final Fantasy XVI',\r\n          cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1888160/header.jpg',\r\n          year: 2023,\r\n          platforms: ['PC', 'PlayStation'],\r\n          rating: 4.7\r\n        }\r\n      ];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch new releases\r\n   * @returns {Promise} Promise object with new releases data\r\n   */\r\n  getNewReleases: async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/new-releases`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching new releases:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch game details by app ID\r\n   * @param {string} gameId - The Steam app ID\r\n   * @returns {Promise} Promise object with game details\r\n   */\r\n  getGameDetails: async (gameId) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/game/${gameId}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`Error fetching game details for ${gameId}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch player count history for a game\r\n   * @param {string} gameId - The Steam app ID\r\n   * @param {string} period - Time period ('24h', '7d', '30d', 'all')\r\n   * @returns {Promise} Promise object with player count history data\r\n   */\r\n  getPlayerCountHistory: async (gameId, period = '7d') => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/player-count/${gameId}?period=${period}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`Error fetching player count history for ${gameId}:`, error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch price history for a game\r\n   * @param {string} gameId - The Steam app ID\r\n   * @returns {Promise} Promise object with price history data\r\n   */\r\n  getPriceHistory: async (gameId) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/price-history/${gameId}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`Error fetching price history for ${gameId}:`, error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Search for games\r\n   * @param {string} query - Search query\r\n   * @returns {Promise} Promise object with search results\r\n   */\r\n  searchGames: async (query) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/search?q=${encodeURIComponent(query)}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`Error searching for games with query \"${query}\":`, error);\r\n      return [];\r\n    }\r\n  }\r\n};\r\n\r\nexport default SteamApiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}