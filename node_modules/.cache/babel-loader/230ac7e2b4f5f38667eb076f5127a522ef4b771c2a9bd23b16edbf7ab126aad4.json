{"ast":null,"code":"// Define API base URL to automatically detect server port\n// In production, this should be your server's domain\nconst getApiBaseUrl = () => {\n  // Parse port from window.location if in browser\n  const port = window.location.port;\n\n  // If frontend runs on port 3001 (development), backend is likely on 8080\n  if (port === '3001') {\n    return 'http://localhost:8080/api';\n  }\n\n  // Otherwise use the same host and port as the frontend (for production)\n  return `${window.location.protocol}//${window.location.hostname}:${port}/api`;\n};\nconst API_BASE_URL = getApiBaseUrl();\nconsole.log('Using API base URL:', API_BASE_URL);\n\n// Fetch with timeout and retry helper\nconst fetchWithRetry = async (url, options = {}, timeout = 5000, retries = 2) => {\n  let lastError;\n  for (let attempt = 0; attempt <= retries; attempt++) {\n    if (attempt > 0) {\n      console.log(`Retry attempt ${attempt}/${retries} for ${url}`);\n      // Add exponential backoff delay for retries\n      await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, attempt - 1)));\n    }\n    try {\n      const controller = new AbortController();\n      const {\n        signal\n      } = controller;\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n      const response = await fetch(url, {\n        ...options,\n        signal\n      });\n      clearTimeout(timeoutId);\n\n      // On success, return the response\n      return response;\n    } catch (error) {\n      lastError = error;\n      console.error(`Attempt ${attempt + 1}/${retries + 1} failed for ${url}:`, error.message);\n    }\n  }\n\n  // If we exhausted all retries, throw the last error\n  throw lastError;\n};\n\n// Helper function to safely parse JSON\nconst safeJsonParse = async response => {\n  try {\n    return await response.json();\n  } catch (error) {\n    console.error('Error parsing JSON response:', error);\n    throw new Error('Invalid JSON response from server');\n  }\n};\n\n/**\r\n * Service to fetch game data from Steam API (proxied through backend)\r\n */\nconst SteamApiService = {\n  /**\r\n   * Fetch a featured game\r\n   * @returns {Promise} Promise object with featured game data\r\n   */\n  getFeaturedGame: async () => {\n    try {\n      console.log('Fetching featured game');\n      const response = await fetchWithRetry(`${API_BASE_URL}/featured-game`);\n      if (!response.ok) {\n        const errorData = await safeJsonParse(response).catch(() => ({}));\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\n        console.error('Server error response:', errorData);\n        throw new Error(errorMsg);\n      }\n      return await safeJsonParse(response);\n    } catch (error) {\n      console.error('Error fetching featured game:', error.message);\n      throw error;\n    }\n  },\n  /**\r\n   * Fetch trending games\r\n   * @returns {Promise} Promise object with trending games data\r\n   */\n  getTrendingGames: async () => {\n    try {\n      console.log('Fetching trending games');\n      const response = await fetchWithRetry(`${API_BASE_URL}/trending-games`);\n      if (!response.ok) {\n        const errorData = await safeJsonParse(response).catch(() => ({}));\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\n        console.error('Server error response:', errorData);\n        throw new Error(errorMsg);\n      }\n      return await safeJsonParse(response);\n    } catch (error) {\n      console.error('Error fetching trending games:', error.message);\n      throw error;\n    }\n  },\n  /**\r\n   * Fetch top rated games\r\n   * @returns {Promise} Promise object with top rated games data\r\n   */\n  getTopRatedGames: async () => {\n    try {\n      console.log('Fetching top rated games');\n      const response = await fetchWithRetry(`${API_BASE_URL}/top-rated-games`);\n      if (!response.ok) {\n        const errorData = await safeJsonParse(response).catch(() => ({}));\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\n        console.error('Server error response:', errorData);\n        throw new Error(errorMsg);\n      }\n      return await safeJsonParse(response);\n    } catch (error) {\n      console.error('Error fetching top rated games:', error.message);\n      throw error;\n    }\n  },\n  /**\r\n   * Fetch new releases\r\n   * @returns {Promise} Promise object with new releases data\r\n   */\n  getNewReleases: async () => {\n    try {\n      console.log('Fetching new releases');\n      const response = await fetchWithRetry(`${API_BASE_URL}/new-releases`);\n      if (!response.ok) {\n        const errorData = await safeJsonParse(response).catch(() => ({}));\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\n        console.error('Server error response:', errorData);\n        throw new Error(errorMsg);\n      }\n      return await safeJsonParse(response);\n    } catch (error) {\n      console.error('Error fetching new releases:', error.message);\n      throw error;\n    }\n  },\n  /**\r\n   * Fetch game details by app ID\r\n   * @param {string} gameId - The Steam app ID\r\n   * @returns {Promise} Promise object with game details\r\n   */\n  getGameDetails: async gameId => {\n    try {\n      const response = await fetchWithRetry(`${API_BASE_URL}/game/${gameId}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await safeJsonParse(response);\n    } catch (error) {\n      console.error(`Error fetching game details for ${gameId}:`, error.message);\n      // Return mock game details based on gameId\n      const mockGames = {\n        '1151640': {\n          id: '1151640',\n          title: 'Elden Ring',\n          description: 'A new dark fantasy action-RPG from FromSoftware, creators of Dark Souls.',\n          longDescription: 'THE NEW FANTASY ACTION RPG. Rise, Tarnished, and be guided by grace to brandish the power of the Elden Ring and become an Elden Lord in the Lands Between.',\n          cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1151640/header.jpg',\n          background: 'https://cdn.akamai.steamstatic.com/steam/apps/1151640/header.jpg',\n          year: 2022,\n          developer: 'FromSoftware Inc.',\n          publisher: 'Bandai Namco Entertainment',\n          platforms: ['PC', 'PlayStation', 'Xbox'],\n          genres: ['Action', 'RPG', 'Dark Fantasy'],\n          tags: ['Souls-like', 'Open World', 'Action RPG'],\n          rating: 4.8,\n          currentPlayers: 87432,\n          releaseDate: 'Feb 25, 2022',\n          price: '₹3,999.00',\n          screenshots: ['https://cdn.akamai.steamstatic.com/steam/apps/1151640/ss_d09b6f351d1a975c25bd5ee3cd5fe611473f0ea9.jpg', 'https://cdn.akamai.steamstatic.com/steam/apps/1151640/ss_8b9c742a5d8f0dc9146716abad3e68476e9d6724.jpg', 'https://cdn.akamai.steamstatic.com/steam/apps/1151640/ss_48cde2e5dacfc9e55ece67f8b53adfc55cad1a24.jpg']\n        },\n        '990080': {\n          id: '990080',\n          title: 'Hogwarts Legacy',\n          description: 'Embark on a journey through the wizarding world of Harry Potter in this open-world action RPG.',\n          longDescription: 'Hogwarts Legacy is an immersive, open-world action RPG set in the world first introduced in the Harry Potter books.',\n          cover: 'https://cdn.akamai.steamstatic.com/steam/apps/990080/header.jpg',\n          background: 'https://cdn.akamai.steamstatic.com/steam/apps/990080/header.jpg',\n          year: 2023,\n          developer: 'Avalanche Software',\n          publisher: 'Warner Bros. Games',\n          platforms: ['PC', 'PlayStation', 'Xbox'],\n          genres: ['RPG', 'Open World', 'Adventure'],\n          tags: ['Magic', 'Fantasy', 'Action RPG'],\n          rating: 4.5,\n          currentPlayers: 63254,\n          releaseDate: 'Feb 10, 2023',\n          price: '₹2,999.00',\n          screenshots: ['https://cdn.akamai.steamstatic.com/steam/apps/990080/ss_1ceda28df0b287f4b72b1fce5158bfcjpg', 'https://cdn.akamai.steamstatic.com/steam/apps/990080/ss_ac8e8546adfd7a2560b1ea0935910749.jpg', 'https://cdn.akamai.steamstatic.com/steam/apps/990080/ss_db3c58b92d90c293f5213f0c55e7ac3f.jpg']\n        }\n      };\n\n      // Return the requested game or a default one\n      return mockGames[gameId] || mockGames['1151640'];\n    }\n  },\n  /**\r\n   * Fetch player count history for a game\r\n   * @param {string} gameId - The Steam app ID\r\n   * @param {string} period - Time period ('24h', '7d', '30d', 'all')\r\n   * @returns {Promise} Promise object with player count history data\r\n   */\n  getPlayerCountHistory: async (gameId, period = '7d') => {\n    try {\n      const response = await fetchWithRetry(`${API_BASE_URL}/player-count/${gameId}?period=${period}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await safeJsonParse(response);\n    } catch (error) {\n      console.error(`Error fetching player count history for ${gameId}:`, error.message);\n      // Return mock player count data\n      const mockPlayerData = [];\n      const today = new Date();\n      let days = 7;\n      if (period === '24h') {\n        days = 1;\n      } else if (period === '30d') {\n        days = 30;\n      } else if (period === 'all') {\n        days = 90;\n      }\n      for (let i = 0; i < days; i++) {\n        const date = new Date(today);\n        date.setDate(today.getDate() - i);\n\n        // Generate a random count between 50,000 and 100,000\n        const count = Math.floor(Math.random() * 50000) + 50000;\n        mockPlayerData.push({\n          date: date.toISOString().split('T')[0],\n          count\n        });\n      }\n      return mockPlayerData.reverse();\n    }\n  },\n  /**\r\n   * Fetch price history for a game\r\n   * @param {string} gameId - The Steam app ID\r\n   * @returns {Promise} Promise object with price history data\r\n   */\n  getPriceHistory: async gameId => {\n    try {\n      const response = await fetchWithRetry(`${API_BASE_URL}/price-history/${gameId}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await safeJsonParse(response);\n    } catch (error) {\n      console.error(`Error fetching price history for ${gameId}:`, error.message);\n      // Return mock price history data\n      const mockPriceData = [];\n      const today = new Date();\n      const basePrice = 3999;\n      for (let i = 0; i < 365; i += 15) {\n        const date = new Date(today);\n        date.setDate(today.getDate() - i);\n        let price = basePrice;\n\n        // Simulate sales\n        if (i > 30 && i < 45) {\n          price = basePrice * 0.8;\n        } else if (i > 180 && i < 210) {\n          price = basePrice * 0.7;\n        } else if (i > 270 && i < 300) {\n          price = basePrice * 0.5;\n        }\n        mockPriceData.push({\n          date: date.toISOString().split('T')[0],\n          price: price.toFixed(2)\n        });\n      }\n      return mockPriceData.reverse();\n    }\n  },\n  /**\r\n   * Search for games\r\n   * @param {string} query - Search query\r\n   * @returns {Promise} Promise object with search results\r\n   */\n  searchGames: async query => {\n    try {\n      const response = await fetchWithRetry(`${API_BASE_URL}/search?q=${encodeURIComponent(query)}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await safeJsonParse(response);\n    } catch (error) {\n      console.error(`Error searching for games with query \"${query}\":`, error.message);\n      // Return mock search results that match the query\n      const mockGames = [{\n        id: '1151640',\n        title: 'Elden Ring',\n        cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1151640/header.jpg',\n        year: 2022,\n        platforms: ['PC', 'PlayStation', 'Xbox'],\n        rating: 4.8\n      }, {\n        id: '990080',\n        title: 'Hogwarts Legacy',\n        cover: 'https://cdn.akamai.steamstatic.com/steam/apps/990080/header.jpg',\n        year: 2023,\n        platforms: ['PC', 'PlayStation', 'Xbox'],\n        rating: 4.5\n      }, {\n        id: '1888160',\n        title: 'Final Fantasy XVI',\n        cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1888160/header.jpg',\n        year: 2023,\n        platforms: ['PC', 'PlayStation'],\n        rating: 4.7\n      }, {\n        id: '1245620',\n        title: 'Resident Evil 4',\n        cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1245620/header.jpg',\n        year: 2023,\n        platforms: ['PC', 'PlayStation', 'Xbox'],\n        rating: 4.6\n      }, {\n        id: '292030',\n        title: 'The Witcher 3',\n        cover: 'https://cdn.akamai.steamstatic.com/steam/apps/292030/header.jpg',\n        year: 2015,\n        platforms: ['PC', 'PlayStation', 'Xbox', 'Switch'],\n        rating: 4.9\n      }];\n\n      // Filter mock games that match the query\n      return mockGames.filter(game => game.title.toLowerCase().includes(query.toLowerCase()));\n    }\n  }\n};\nexport default SteamApiService;","map":{"version":3,"names":["getApiBaseUrl","port","window","location","protocol","hostname","API_BASE_URL","console","log","fetchWithRetry","url","options","timeout","retries","lastError","attempt","Promise","resolve","setTimeout","Math","pow","controller","AbortController","signal","timeoutId","abort","response","fetch","clearTimeout","error","message","safeJsonParse","json","Error","SteamApiService","getFeaturedGame","ok","errorData","catch","errorMsg","getTrendingGames","getTopRatedGames","getNewReleases","getGameDetails","gameId","mockGames","id","title","description","longDescription","cover","background","year","developer","publisher","platforms","genres","tags","rating","currentPlayers","releaseDate","price","screenshots","getPlayerCountHistory","period","mockPlayerData","today","Date","days","i","date","setDate","getDate","count","floor","random","push","toISOString","split","reverse","getPriceHistory","mockPriceData","basePrice","toFixed","searchGames","query","encodeURIComponent","filter","game","toLowerCase","includes"],"sources":["C:/Users/kshit/Desktop/WP and dbms project/GameVault/src/services/steamApi.js"],"sourcesContent":["// Define API base URL to automatically detect server port\r\n// In production, this should be your server's domain\r\nconst getApiBaseUrl = () => {\r\n  // Parse port from window.location if in browser\r\n  const port = window.location.port;\r\n  \r\n  // If frontend runs on port 3001 (development), backend is likely on 8080\r\n  if (port === '3001') {\r\n    return 'http://localhost:8080/api';\r\n  }\r\n  \r\n  // Otherwise use the same host and port as the frontend (for production)\r\n  return `${window.location.protocol}//${window.location.hostname}:${port}/api`;\r\n};\r\n\r\nconst API_BASE_URL = getApiBaseUrl();\r\nconsole.log('Using API base URL:', API_BASE_URL);\r\n\r\n// Fetch with timeout and retry helper\r\nconst fetchWithRetry = async (url, options = {}, timeout = 5000, retries = 2) => {\r\n  let lastError;\r\n  \r\n  for (let attempt = 0; attempt <= retries; attempt++) {\r\n    if (attempt > 0) {\r\n      console.log(`Retry attempt ${attempt}/${retries} for ${url}`);\r\n      // Add exponential backoff delay for retries\r\n      await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, attempt - 1)));\r\n    }\r\n    \r\n    try {\r\n      const controller = new AbortController();\r\n      const { signal } = controller;\r\n      \r\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\r\n      \r\n      const response = await fetch(url, { ...options, signal });\r\n      clearTimeout(timeoutId);\r\n      \r\n      // On success, return the response\r\n      return response;\r\n    } catch (error) {\r\n      lastError = error;\r\n      console.error(`Attempt ${attempt + 1}/${retries + 1} failed for ${url}:`, error.message);\r\n    }\r\n  }\r\n  \r\n  // If we exhausted all retries, throw the last error\r\n  throw lastError;\r\n};\r\n\r\n// Helper function to safely parse JSON\r\nconst safeJsonParse = async (response) => {\r\n  try {\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error parsing JSON response:', error);\r\n    throw new Error('Invalid JSON response from server');\r\n  }\r\n};\r\n\r\n/**\r\n * Service to fetch game data from Steam API (proxied through backend)\r\n */\r\nconst SteamApiService = {\r\n  /**\r\n   * Fetch a featured game\r\n   * @returns {Promise} Promise object with featured game data\r\n   */\r\n  getFeaturedGame: async () => {\r\n    try {\r\n      console.log('Fetching featured game');\r\n      const response = await fetchWithRetry(`${API_BASE_URL}/featured-game`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await safeJsonParse(response).catch(() => ({}));\r\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\r\n        console.error('Server error response:', errorData);\r\n        throw new Error(errorMsg);\r\n      }\r\n      \r\n      return await safeJsonParse(response);\r\n    } catch (error) {\r\n      console.error('Error fetching featured game:', error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch trending games\r\n   * @returns {Promise} Promise object with trending games data\r\n   */\r\n  getTrendingGames: async () => {\r\n    try {\r\n      console.log('Fetching trending games');\r\n      const response = await fetchWithRetry(`${API_BASE_URL}/trending-games`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await safeJsonParse(response).catch(() => ({}));\r\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\r\n        console.error('Server error response:', errorData);\r\n        throw new Error(errorMsg);\r\n      }\r\n      \r\n      return await safeJsonParse(response);\r\n    } catch (error) {\r\n      console.error('Error fetching trending games:', error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch top rated games\r\n   * @returns {Promise} Promise object with top rated games data\r\n   */\r\n  getTopRatedGames: async () => {\r\n    try {\r\n      console.log('Fetching top rated games');\r\n      const response = await fetchWithRetry(`${API_BASE_URL}/top-rated-games`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await safeJsonParse(response).catch(() => ({}));\r\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\r\n        console.error('Server error response:', errorData);\r\n        throw new Error(errorMsg);\r\n      }\r\n      \r\n      return await safeJsonParse(response);\r\n    } catch (error) {\r\n      console.error('Error fetching top rated games:', error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch new releases\r\n   * @returns {Promise} Promise object with new releases data\r\n   */\r\n  getNewReleases: async () => {\r\n    try {\r\n      console.log('Fetching new releases');\r\n      const response = await fetchWithRetry(`${API_BASE_URL}/new-releases`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await safeJsonParse(response).catch(() => ({}));\r\n        const errorMsg = errorData.message || errorData.error || 'Network response was not ok';\r\n        console.error('Server error response:', errorData);\r\n        throw new Error(errorMsg);\r\n      }\r\n      \r\n      return await safeJsonParse(response);\r\n    } catch (error) {\r\n      console.error('Error fetching new releases:', error.message);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch game details by app ID\r\n   * @param {string} gameId - The Steam app ID\r\n   * @returns {Promise} Promise object with game details\r\n   */\r\n  getGameDetails: async (gameId) => {\r\n    try {\r\n      const response = await fetchWithRetry(`${API_BASE_URL}/game/${gameId}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await safeJsonParse(response);\r\n    } catch (error) {\r\n      console.error(`Error fetching game details for ${gameId}:`, error.message);\r\n      // Return mock game details based on gameId\r\n      const mockGames = {\r\n        '1151640': {\r\n          id: '1151640',\r\n          title: 'Elden Ring',\r\n          description: 'A new dark fantasy action-RPG from FromSoftware, creators of Dark Souls.',\r\n          longDescription: 'THE NEW FANTASY ACTION RPG. Rise, Tarnished, and be guided by grace to brandish the power of the Elden Ring and become an Elden Lord in the Lands Between.',\r\n          cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1151640/header.jpg',\r\n          background: 'https://cdn.akamai.steamstatic.com/steam/apps/1151640/header.jpg',\r\n          year: 2022,\r\n          developer: 'FromSoftware Inc.',\r\n          publisher: 'Bandai Namco Entertainment',\r\n          platforms: ['PC', 'PlayStation', 'Xbox'],\r\n          genres: ['Action', 'RPG', 'Dark Fantasy'],\r\n          tags: ['Souls-like', 'Open World', 'Action RPG'],\r\n          rating: 4.8,\r\n          currentPlayers: 87432,\r\n          releaseDate: 'Feb 25, 2022',\r\n          price: '₹3,999.00',\r\n          screenshots: [\r\n            'https://cdn.akamai.steamstatic.com/steam/apps/1151640/ss_d09b6f351d1a975c25bd5ee3cd5fe611473f0ea9.jpg',\r\n            'https://cdn.akamai.steamstatic.com/steam/apps/1151640/ss_8b9c742a5d8f0dc9146716abad3e68476e9d6724.jpg',\r\n            'https://cdn.akamai.steamstatic.com/steam/apps/1151640/ss_48cde2e5dacfc9e55ece67f8b53adfc55cad1a24.jpg'\r\n          ]\r\n        },\r\n        '990080': {\r\n          id: '990080',\r\n          title: 'Hogwarts Legacy',\r\n          description: 'Embark on a journey through the wizarding world of Harry Potter in this open-world action RPG.',\r\n          longDescription: 'Hogwarts Legacy is an immersive, open-world action RPG set in the world first introduced in the Harry Potter books.',\r\n          cover: 'https://cdn.akamai.steamstatic.com/steam/apps/990080/header.jpg',\r\n          background: 'https://cdn.akamai.steamstatic.com/steam/apps/990080/header.jpg',\r\n          year: 2023,\r\n          developer: 'Avalanche Software',\r\n          publisher: 'Warner Bros. Games',\r\n          platforms: ['PC', 'PlayStation', 'Xbox'],\r\n          genres: ['RPG', 'Open World', 'Adventure'],\r\n          tags: ['Magic', 'Fantasy', 'Action RPG'],\r\n          rating: 4.5,\r\n          currentPlayers: 63254,\r\n          releaseDate: 'Feb 10, 2023',\r\n          price: '₹2,999.00',\r\n          screenshots: [\r\n            'https://cdn.akamai.steamstatic.com/steam/apps/990080/ss_1ceda28df0b287f4b72b1fce5158bfcjpg',\r\n            'https://cdn.akamai.steamstatic.com/steam/apps/990080/ss_ac8e8546adfd7a2560b1ea0935910749.jpg',\r\n            'https://cdn.akamai.steamstatic.com/steam/apps/990080/ss_db3c58b92d90c293f5213f0c55e7ac3f.jpg'\r\n          ]\r\n        }\r\n      };\r\n      \r\n      // Return the requested game or a default one\r\n      return mockGames[gameId] || mockGames['1151640'];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch player count history for a game\r\n   * @param {string} gameId - The Steam app ID\r\n   * @param {string} period - Time period ('24h', '7d', '30d', 'all')\r\n   * @returns {Promise} Promise object with player count history data\r\n   */\r\n  getPlayerCountHistory: async (gameId, period = '7d') => {\r\n    try {\r\n      const response = await fetchWithRetry(`${API_BASE_URL}/player-count/${gameId}?period=${period}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await safeJsonParse(response);\r\n    } catch (error) {\r\n      console.error(`Error fetching player count history for ${gameId}:`, error.message);\r\n      // Return mock player count data\r\n      const mockPlayerData = [];\r\n      const today = new Date();\r\n      let days = 7;\r\n      \r\n      if (period === '24h') {\r\n        days = 1;\r\n      } else if (period === '30d') {\r\n        days = 30;\r\n      } else if (period === 'all') {\r\n        days = 90;\r\n      }\r\n      \r\n      for (let i = 0; i < days; i++) {\r\n        const date = new Date(today);\r\n        date.setDate(today.getDate() - i);\r\n        \r\n        // Generate a random count between 50,000 and 100,000\r\n        const count = Math.floor(Math.random() * 50000) + 50000;\r\n        \r\n        mockPlayerData.push({\r\n          date: date.toISOString().split('T')[0],\r\n          count\r\n        });\r\n      }\r\n      \r\n      return mockPlayerData.reverse();\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch price history for a game\r\n   * @param {string} gameId - The Steam app ID\r\n   * @returns {Promise} Promise object with price history data\r\n   */\r\n  getPriceHistory: async (gameId) => {\r\n    try {\r\n      const response = await fetchWithRetry(`${API_BASE_URL}/price-history/${gameId}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await safeJsonParse(response);\r\n    } catch (error) {\r\n      console.error(`Error fetching price history for ${gameId}:`, error.message);\r\n      // Return mock price history data\r\n      const mockPriceData = [];\r\n      const today = new Date();\r\n      const basePrice = 3999;\r\n      \r\n      for (let i = 0; i < 365; i += 15) {\r\n        const date = new Date(today);\r\n        date.setDate(today.getDate() - i);\r\n        \r\n        let price = basePrice;\r\n        \r\n        // Simulate sales\r\n        if (i > 30 && i < 45) {\r\n          price = basePrice * 0.8;\r\n        } else if (i > 180 && i < 210) {\r\n          price = basePrice * 0.7;\r\n        } else if (i > 270 && i < 300) {\r\n          price = basePrice * 0.5;\r\n        }\r\n        \r\n        mockPriceData.push({\r\n          date: date.toISOString().split('T')[0],\r\n          price: price.toFixed(2)\r\n        });\r\n      }\r\n      \r\n      return mockPriceData.reverse();\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Search for games\r\n   * @param {string} query - Search query\r\n   * @returns {Promise} Promise object with search results\r\n   */\r\n  searchGames: async (query) => {\r\n    try {\r\n      const response = await fetchWithRetry(`${API_BASE_URL}/search?q=${encodeURIComponent(query)}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await safeJsonParse(response);\r\n    } catch (error) {\r\n      console.error(`Error searching for games with query \"${query}\":`, error.message);\r\n      // Return mock search results that match the query\r\n      const mockGames = [\r\n        {\r\n          id: '1151640',\r\n          title: 'Elden Ring',\r\n          cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1151640/header.jpg',\r\n          year: 2022,\r\n          platforms: ['PC', 'PlayStation', 'Xbox'],\r\n          rating: 4.8\r\n        },\r\n        {\r\n          id: '990080',\r\n          title: 'Hogwarts Legacy',\r\n          cover: 'https://cdn.akamai.steamstatic.com/steam/apps/990080/header.jpg',\r\n          year: 2023,\r\n          platforms: ['PC', 'PlayStation', 'Xbox'],\r\n          rating: 4.5\r\n        },\r\n        {\r\n          id: '1888160',\r\n          title: 'Final Fantasy XVI',\r\n          cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1888160/header.jpg',\r\n          year: 2023,\r\n          platforms: ['PC', 'PlayStation'],\r\n          rating: 4.7\r\n        },\r\n        {\r\n          id: '1245620',\r\n          title: 'Resident Evil 4',\r\n          cover: 'https://cdn.akamai.steamstatic.com/steam/apps/1245620/header.jpg',\r\n          year: 2023,\r\n          platforms: ['PC', 'PlayStation', 'Xbox'],\r\n          rating: 4.6\r\n        },\r\n        {\r\n          id: '292030',\r\n          title: 'The Witcher 3',\r\n          cover: 'https://cdn.akamai.steamstatic.com/steam/apps/292030/header.jpg',\r\n          year: 2015,\r\n          platforms: ['PC', 'PlayStation', 'Xbox', 'Switch'],\r\n          rating: 4.9\r\n        }\r\n      ];\r\n      \r\n      // Filter mock games that match the query\r\n      return mockGames.filter(game => \r\n        game.title.toLowerCase().includes(query.toLowerCase())\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport default SteamApiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}