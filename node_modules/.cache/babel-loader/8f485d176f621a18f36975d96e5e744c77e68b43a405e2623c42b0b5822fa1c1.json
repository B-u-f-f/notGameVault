{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8080/api';\n\n/**\r\n * Service to fetch game data from Steam API (proxied through backend)\r\n */\nconst SteamApiService = {\n  /**\r\n   * Fetch a featured game\r\n   * @returns {Promise} Promise object with featured game data\r\n   */\n  getFeaturedGame: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/featured-game`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching featured game:', error);\n      return null;\n    }\n  },\n  /**\r\n   * Fetch trending games\r\n   * @returns {Promise} Promise object with trending games data\r\n   */\n  getTrendingGames: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/trending-games`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching trending games:', error);\n      return [];\n    }\n  },\n  /**\r\n   * Fetch top rated games\r\n   * @returns {Promise} Promise object with top rated games data\r\n   */\n  getTopRatedGames: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/top-rated-games`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching top rated games:', error);\n      return [];\n    }\n  },\n  /**\r\n   * Fetch new releases\r\n   * @returns {Promise} Promise object with new releases data\r\n   */\n  getNewReleases: async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/new-releases`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching new releases:', error);\n      return [];\n    }\n  },\n  /**\r\n   * Fetch game details by app ID\r\n   * @param {string} gameId - The Steam app ID\r\n   * @returns {Promise} Promise object with game details\r\n   */\n  getGameDetails: async gameId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/game/${gameId}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error fetching game details for ${gameId}:`, error);\n      return null;\n    }\n  },\n  /**\r\n   * Fetch player count history for a game\r\n   * @param {string} gameId - The Steam app ID\r\n   * @param {string} period - Time period ('24h', '7d', '30d', 'all')\r\n   * @returns {Promise} Promise object with player count history data\r\n   */\n  getPlayerCountHistory: async (gameId, period = '7d') => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/player-count/${gameId}?period=${period}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error fetching player count history for ${gameId}:`, error);\n      return [];\n    }\n  },\n  /**\r\n   * Fetch price history for a game\r\n   * @param {string} gameId - The Steam app ID\r\n   * @returns {Promise} Promise object with price history data\r\n   */\n  getPriceHistory: async gameId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/price-history/${gameId}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error fetching price history for ${gameId}:`, error);\n      return [];\n    }\n  },\n  /**\r\n   * Search for games\r\n   * @param {string} query - Search query\r\n   * @returns {Promise} Promise object with search results\r\n   */\n  searchGames: async query => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/search?q=${encodeURIComponent(query)}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error searching for games with query \"${query}\":`, error);\n      return [];\n    }\n  }\n};\nexport default SteamApiService;","map":{"version":3,"names":["API_BASE_URL","SteamApiService","getFeaturedGame","response","fetch","ok","Error","json","error","console","getTrendingGames","getTopRatedGames","getNewReleases","getGameDetails","gameId","getPlayerCountHistory","period","getPriceHistory","searchGames","query","encodeURIComponent"],"sources":["C:/Users/kshit/Desktop/WP and dbms project/GameVault/src/services/steamApi.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8080/api';\r\n\r\n/**\r\n * Service to fetch game data from Steam API (proxied through backend)\r\n */\r\nconst SteamApiService = {\r\n  /**\r\n   * Fetch a featured game\r\n   * @returns {Promise} Promise object with featured game data\r\n   */\r\n  getFeaturedGame: async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/featured-game`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching featured game:', error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch trending games\r\n   * @returns {Promise} Promise object with trending games data\r\n   */\r\n  getTrendingGames: async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/trending-games`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching trending games:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch top rated games\r\n   * @returns {Promise} Promise object with top rated games data\r\n   */\r\n  getTopRatedGames: async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/top-rated-games`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching top rated games:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch new releases\r\n   * @returns {Promise} Promise object with new releases data\r\n   */\r\n  getNewReleases: async () => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/new-releases`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error fetching new releases:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch game details by app ID\r\n   * @param {string} gameId - The Steam app ID\r\n   * @returns {Promise} Promise object with game details\r\n   */\r\n  getGameDetails: async (gameId) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/game/${gameId}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`Error fetching game details for ${gameId}:`, error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch player count history for a game\r\n   * @param {string} gameId - The Steam app ID\r\n   * @param {string} period - Time period ('24h', '7d', '30d', 'all')\r\n   * @returns {Promise} Promise object with player count history data\r\n   */\r\n  getPlayerCountHistory: async (gameId, period = '7d') => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/player-count/${gameId}?period=${period}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`Error fetching player count history for ${gameId}:`, error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Fetch price history for a game\r\n   * @param {string} gameId - The Steam app ID\r\n   * @returns {Promise} Promise object with price history data\r\n   */\r\n  getPriceHistory: async (gameId) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/price-history/${gameId}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`Error fetching price history for ${gameId}:`, error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Search for games\r\n   * @param {string} query - Search query\r\n   * @returns {Promise} Promise object with search results\r\n   */\r\n  searchGames: async (query) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/search?q=${encodeURIComponent(query)}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error(`Error searching for games with query \"${query}\":`, error);\r\n      return [];\r\n    }\r\n  }\r\n};\r\n\r\nexport default SteamApiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}